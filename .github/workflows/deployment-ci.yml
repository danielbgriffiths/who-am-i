name: Deploy to Amazon ECS

on:
  workflow_call:

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: who-am-i
  ECS_SERVICE: who-am-i
  ECS_CLUSTER: who-am-i
  ECS_TASK_DEFINITION: ../../.aws/task-definition.json
  CONTAINER_NAME: who-am-i

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # AssumeRole with static IAM credentials in repository secrets
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-2
#          role-to-assume: arn:aws:iam::381492151940:role/who-am-i
#          role-duration-seconds: 1200
#          role-session-name: who-am-i-role-session

          # Assume role and call aws
          role-to-assume: arn:aws:iam::381492151940:role/who-am-i
          role-session-name: who_am_i
          aws-region: us-east-2

#          role-skip-session-tagging: true
#          managed-session-policies: arn:aws:iam::aws:policy/AdministratorAccess
#          unset-current-credentials: true
#          audience: sts.amazonaws.com.cn
#          aws-region: us-east-3
#          role-to-assume: arn:aws:iam::381492151940:role/who-am-i

#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-2
#          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
#          role-session-name: who-am-i-role-session

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
